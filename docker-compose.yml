services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres-tourest
    environment:
      POSTGRES_DB: tourest
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    networks:
      - tourest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tourest"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Node.js/Express)
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: api-tourest
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tourest
      - DB_USER=postgres
      - DB_PASSWORD=password123
      - JWT_SECRET=mi_clave_secreta_jwt_2024
      - PORT=5000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - tourest-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Frontend React
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: react-tourest
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_NAME=Sistema de Venta de Pasajes
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - tourest-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # PGAdmin (Interfaz web para PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-tourest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tourest.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8081:80"
    depends_on:
      - postgres
    networks:
      - tourest-network
    restart: unless-stopped

# Volúmenes para persistencia de datos
volumes:
  postgres_data:

# Red para comunicación entre contenedores
networks:
  tourest-network:
    driver: bridge